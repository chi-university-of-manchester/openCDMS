/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.psygrid.common.email;


/**
 * @author Lucy Bridges
 *
 * @hibernate.class table="t_emails"
 */
public class Email {
	
	/**
	 * Unique identifier, generated by the Hibernate framework
	 */
	protected Long id;
	
	/**
	 * The subject of the email
	 */
	protected String subject;
	
	/**
	 * String containing the main body of the email. Can contain
	 * variable names, delimited by '%'s, which can be substitued
	 * by specified values.
	 */
	protected String body;
	
	public Email() {
	}
	
	
	/**
	 * Get the unique identifier, generated by the Hibernate framework
	 * 
	 * @return The unique identifier
	 * 
	 * @hibernate.id column = "c_id" 
	 * 			     generator-class="native"
	 */
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @hibernate.property column="c_subject"
	 */
	public String getSubject() {
		return subject;
	}
	
	/**
	 * @param subject the subject of the email
	 */
	public void setSubject(String subject) {
		this.subject = subject;
	}
	
	/**
	 * @hibernate.property column="c_body" type="text" length="4096"
	 */
	public String getBody() {
		return body;
	}

	/**
	 * Substitute the given parameters in the body of the email
	 * with the values specified.
	 * 
	 * @param params
	 * @return email body
	 */
	/*
	public String getBody(Map<String,String> params) {
		
		String body = this.body;
		
		for(String parameter: params.keySet()) {
			 // Compile regular expression
            Pattern pattern = Pattern.compile(parameter);
    
            // Replace all occurrences of the parameter in the body of the email
            Matcher matcher = pattern.matcher(body);
            body = matcher.replaceAll(params.get(parameter));
		}
		
		return body;
	}
	*/

	/**
	 * Return the body of the email, first replacing any field names from the Subject 
	 * class (delimited by '%'s) with values from the provided subject.
	 * 
	 * @param subject
	 * @return String
	 */
	/*
	public String getBody(ISubject subject) {
		
		Class s = subject.getClass();
		Field[] fields = s.getDeclaredFields();
		
		for (Field f: fields) {
			 // Compile regular expression
            Pattern pattern = Pattern.compile("%"+f.getName()+"%");
    
            // Replace all occurrences of the parameter in the body of the email
            Matcher matcher = pattern.matcher(body);
            try {
            	body = matcher.replaceAll(f.get(subject).toString());
            }
            catch (IllegalAccessException e) {
            	//do nothing?
            }
		}
		
		return body;
	}
	*/
	
	/**
	 * Set the main body of the email. Can contain variable names, 
	 * delimited by '%'s, which can be substitued by specified 
	 * values on retrieval.
	 * 
	 * @param body the content of the email
	 */
	public void setBody(String body) {
		this.body = body;
	}

	public EmailDTO toDTO() {
		//check for an already existing instance of a dto object for this 
		//class in the set of references
		EmailDTO dtoEmail = new EmailDTO();

		dtoEmail.setSubject(this.subject);
		dtoEmail.setBody(this.body);

		return dtoEmail;
	}

	
}
