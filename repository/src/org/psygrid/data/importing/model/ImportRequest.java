/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/


package org.psygrid.data.importing.model;

import java.util.Date;

/**
 * Class to represent a request to import data from a file.
 * 
 * @author Terry Child
 * 
 * @hibernate.class table="t_import_requests"
 */
public class ImportRequest {

	public static final String STATUS_PENDING = "Pending";
	public static final String STATUS_PROCESSING = "Processing";
	public static final String STATUS_COMPLETE = "Complete";
	public static final String STATUS_ERROR = "Error";
	public static final String STATUS_NO_DATA = "No Data";	
	
    /**
	 * Unique identifier, generated by the Hibernate framework
	 */
	private Long id;
	
	/**
	 * The project code of the project.
	 */
	private String projectCode;

	/**
	 * The DN of the requester.
	 */
	private String user;
	
	/**
	 * The date/time when the request was made.
	 */
	private Date requestDate;
	
	/**
	 * remoteFilePath
	 */
	private String remoteFilePath;

	/**
	 * The data to be imported - depends on the plugin but usually csv.
	 */
	private String filePath;

	/**
	 * The type of the import data.
	 */
	private String dataType;

	/**
	 * If True then the request is required to be processed 
	 * immediately. Otherwise it will be queued for scheduled execution.
	 */
	private boolean immediate;
	
	/**
	 * The status of the request.
	 */
	private String status;

	/**
	 * The line currently being processed. 
	 */
	private int currentLine;

	/**
	 * The date/time when the request was completed.
	 */
	private Date completedDate;

	/**
	 * Default no-arg constructor.
	 */
	public ImportRequest(){}
	
	/**
	 * @param projectCode
	 * @param user
	 * @param remoteFilePath
	 * @param filePath
	 * @param md5Hash
	 * @param immediate
	 */
	public ImportRequest(String projectCode, String user,
			String remoteFilePath, String filePath, String dataType,
			boolean immediate) {
		super();
		this.projectCode = projectCode;
		this.user = user;
		this.remoteFilePath = remoteFilePath;
		this.filePath = filePath;
		this.dataType=dataType;
		this.immediate = immediate;
		this.requestDate = new Date();
		this.status = STATUS_PENDING;
	}
	
	/**
	 * Get the unique identifier, generated by the Hibernate framework
	 * 
	 * @return The unique identifier
	 * 
	 * @hibernate.id column = "c_id" 
	 * 			     generator-class="native"
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Set the unique identifier, generated by the Hibernate framework
	 * 
	 * @param id The unique identifier
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Get the project code.
	 * 
	 * @return The project code.
	 * 
	 * @hibernate.property column="c_project_code"
	 */
	public String getProjectCode() {
		return projectCode;
	}

	/**
	 * Set the project code.
	 * 
	 * @param projectCode The project code.
	 */
	public void setProjectCode(String projectCode) {
		this.projectCode = projectCode;
	}

	/**
	 * Get the DN of the requester.
	 * 
	 * @return The DN of the requestor.
	 * 
	 * @hibernate.property column="c_user"
	 */
	public String getUser() {
		return user;
	}

	/**
	 * Set the DN of the requester.
	 * 
	 * @param requestor The DN of the requester.
	 */
	public void setUser(String user) {
		this.user = user;
	}

	/**
	 * Get the date/time when the request was made.
	 * 
	 * @return The request date.
	 * 
	 * @hibernate.property column="c_request_date"
	 */
	public Date getRequestDate() {
		return requestDate;
	}

	/**
	 * Set the date/time when the request was made.
	 * 
	 * @param requestDate The request date.
	 */
	public void setRequestDate(Date requestDate) {
		this.requestDate = requestDate;
	}

		
	/**
	 * @return the remoteFilePath
	 * 
	 * @hibernate.property column="c_remote_file_path"
	 */
	public String getRemoteFilePath() {
		return remoteFilePath;
	}

	/**
	 * @param remoteFilePath the remoteFilePath to set
	 */
	public void setRemoteFilePath(String remoteFilePath) {
		this.remoteFilePath = remoteFilePath;
	}

	/**
	 * @return the filePath
	 * 
	 * @hibernate.property column="c_file_path"
	 */
	public String getFilePath() {
		return filePath;
	}

	/**
	 * @param filePath the filePath to set
	 */
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}

	
	/**
	 * @return the dataType
	 * 
	 * @hibernate.property column="c_data_type"
	 */
	public String getDataType() {
		return dataType;
	}

	/**
	 * @param dataType the dataType to set
	 */
	public void setDataType(String dataType) {
		this.dataType = dataType;
	}

	/**
	 * Get whether the export request is to be processed immediately
	 * or not.
	 * 
	 * @return Boolean
	 * 
	 * @hibernate.property column="c_immediate"
	 */
	public boolean isImmediate() {
		return immediate;
	}

	public void setImmediate(boolean immediate) {
		this.immediate = immediate;
	}

	/**
	 * Get the status of the request.
	 * 
	 * @return The status.
	 * 
	 * @hibernate.property column="c_status"
	 */
	public String getStatus() {
		return status;
	}

	/**
	 * Set the status of the request.
	 * 
	 * @param status The status.
	 */
	public void setStatus(String status) {
		this.status = status;
	}
	
	
		
	/**
	 * @return the currentLine
	 * 
	 * @hibernate.property column="c_current_line"
	 */
	public int getCurrentLine() {
		return currentLine;
	}

	/**
	 * @param currentLine the currentLine to set
	 */
	public void setCurrentLine(int currentLine) {
		this.currentLine = currentLine;
	}

	/**
	 * Get the date/time when the export request was completed.
	 * 
	 * @return The date/time completed.
	 * 
	 * @hibernate.property column="c_completed"
	 */
	public Date getCompletedDate() {
		return completedDate;
	}

	/**
	 * Set the date/time when the export request was completed.
	 * 
	 * @param completedDate The date/time completed.
	 */
	public void setCompletedDate(Date completedDate) {
		this.completedDate = completedDate;
	}

	
}

