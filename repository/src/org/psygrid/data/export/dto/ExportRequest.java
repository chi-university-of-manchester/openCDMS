/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/


package org.psygrid.data.export.dto;

import java.util.Date;


/**
 * @author Rob Harper
 *
 */
public class ExportRequest {

    /**
	 * Unique identifier, generated by the Hibernate framework
	 */
	private Long id;
	
	/**
	 * Version, generated by the Hibernate framework
	 */
	private int version;
	
	/**
	 * The DN of the requestor of the export.
	 */
	private String requestor;
	
	/**
	 * The status of the request.
	 */
	private String status;
	
	/**
	 * The project code of the project to export.
	 */
	private String projectCode;
	
	private Long queryId;
	
	/**
	 * The list of groups within the project to export data
     * for.
	 */
	private String[] groups = new String[0];
	
	/**
	 * The list of document occurrences (and entries) within the project to
	 * export data for.
	 */
	private ExportDocument[] docOccs = new ExportDocument[0];
	
	/**
	 * The date/time when the export request was made.
	 */
	private Date requestDate;
	
	/**
	 * The date/time when the export request was completed.
	 */
	private Date completedDate;
	
	/**
	 * The filename of the zip file containing the exported 
	 * data.
	 */
	private String path;
	
	/**
	 * The filename of the text file containing the SHA-1 hash of the zip file.
	 */
	private String sha1Path;
	
	/**
	 * The filename of the text file containing the MD5 hash of the zip file.
	 */
	private String md5Path;
	
	private String format;
	
	private boolean immediate;

	/**
	 * The map of export actions for security tags for this export request.
	 */
	private ExportSecurityActionMap[] actionMap = new ExportSecurityActionMap[0];
	
	/**
	 * Only document instances with one of these statuses will be exported.
	 */
	private String[] documentStatuses = new String[0];
	
	/**
	 * Whether to show the codes for responses.
	 * 
	 * Applicable for CSV and Excel exports only.
	 */
	private boolean showCodes = true;
	

	/**
	 * Whether to show the codes for responses.
	 * 
	 * Applicable for CSV and Excel exports only.
	 */
	private boolean showValues = true;
	
	/**
	 * Whether to export the participant register
	 */
	private boolean participantRegister;
	
	public Date getCompletedDate() {
		return completedDate;
	}
	
	/**
	 * 
	 * @param actionMapArray - the array of mappings to be applied to this export request.
	 */
	public void setExportSecurityActionMaps(ExportSecurityActionMap[] actionMapArray){
		this.actionMap = actionMapArray;
	}
	
	/**
	 * 
	 * @return - the mappings (from security tags to actions) to be deployed by this export request.
	 */
	public ExportSecurityActionMap[] getExportSecurityActionMaps(){
		return this.actionMap;
	}

	public void setCompletedDate(Date completedDate) {
		this.completedDate = completedDate;
	}

	public String[] getGroups() {
		return groups;
	}

	public void setGroups(String[] groups) {
		this.groups = groups;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getPath() {
		return path;
	}

	public void setPath(String path) {
		this.path = path;
	}

	public String getMd5Path() {
		return md5Path;
	}

	public void setMd5Path(String md5Path) {
		this.md5Path = md5Path;
	}

	public String getSha1Path() {
		return sha1Path;
	}

	public void setSha1Path(String sha1Path) {
		this.sha1Path = sha1Path;
	}
	
	public String getProjectCode() {
		return projectCode;
	}

	public void setProjectCode(String projectCode) {
		this.projectCode = projectCode;
	}

	public Long getQueryId() {
		return queryId;
	}

	public void setQueryId(Long queryId) {
		this.queryId = queryId;
	}

	public Date getRequestDate() {
		return requestDate;
	}

	public void setRequestDate(Date requestDate) {
		this.requestDate = requestDate;
	}

	public String getRequestor() {
		return requestor;
	}

	public void setRequestor(String requestor) {
		this.requestor = requestor;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	public ExportDocument[] getDocOccs() {
		return docOccs;
	}

	public void setDocOccs(ExportDocument[] docOccs) {
		this.docOccs = docOccs;
	}

	public String getFormat() {
		return format;
	}

	public void setFormat(String format) {
		this.format = format;
	}

	public boolean isImmediate() {
		return immediate;
	}

	public void setImmediate(boolean immediate) {
		this.immediate = immediate;
	}

	public String[] getDocumentStatuses() {
		return documentStatuses;
	}

	public void setDocumentStatuses(String[] documentStatuses) {
		this.documentStatuses = documentStatuses;
	}

	/**
	 * Whether to show the codes for responses.
	 * 
	 * Applicable for CSV and Excel exports only.
	 * 
	 * @return showCodes
	 */
	public boolean isShowCodes() {
		return showCodes;
	}

	/**
	 * Whether to show the codes for responses.
	 * 
	 * Applicable for CSV and Excel exports only.
	 * 
	 * @param showCodes
	 */
	public void setShowCodes(boolean showCodes) {
		this.showCodes = showCodes;
	}

	/**
	 * Whether to show the values for responses. If false showCodes should be 
	 * set to true, so that just the codes are displayed.
	 * 
	 * Applicable for CSV and Excel exports only.
	 * 
	 * @return showValues
	 */
	public boolean isShowValues() {
		return showValues;
	}

	/**
	 * Whether to show the values for responses. If false showCodes should be 
	 * set to true, so that just the codes are displayed.
	 * 
	 * Applicable for CSV and Excel exports only.
	 * 
	 * @param showValues
	 */
	public void setShowValues(boolean showValues) {
		this.showValues = showValues;
	}
	
	/**
	 * Whether the participant register should be exported
	 * 
	 * @return
	 */
	public boolean isParticipantRegister() {
		return participantRegister;
	}

	/**
	 * Whether the participant register should be exported
	 * 
	 * @param participantRegister
	 */
	public void setParticipantRegister(boolean participantRegister) {
		this.participantRegister = participantRegister;
	}

	
	public org.psygrid.data.export.hibernate.ExportRequest toHibernate(){
		org.psygrid.data.export.hibernate.ExportRequest hER = new org.psygrid.data.export.hibernate.ExportRequest();
		hER.setCompletedDate(completedDate);
		hER.setId(id);
		hER.setPath(path);
		hER.setMd5Path(md5Path);
		hER.setSha1Path(sha1Path);
		hER.setProjectCode(projectCode);
		hER.setQueryId(queryId);
		hER.setRequestDate(requestDate);
		hER.setRequestor(requestor);
		hER.setStatus(status);
		hER.setVersion(version);
		hER.setFormat(format);
		hER.setImmediate(immediate);
		hER.setShowCodes(showCodes);
		hER.setShowValues(showValues);
		hER.setParticipantRegister(participantRegister);
		
		for ( String g: groups ){
			hER.getGroups().add(g);
		}
		for(ExportSecurityActionMap map: actionMap){
			hER.getActionsMap().add(map.toHibernate()); 
		}
		for (ExportDocument d: docOccs){
			hER.getDocOccs().add(d.toHibernate());
		}
		for (String s: documentStatuses) {
			hER.getDocumentStatuses().add(s);
		}
		return hER;
		
	}

}
