/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.psygrid.data.export.hibernate;

import org.psygrid.data.export.security.DataExportActions;
import org.psygrid.data.export.security.ExportSecurityValues;

/**
 * Class to represent a mapping between a particular export security tag and the 
 * consequent export action to take.
 * 
 * @author Bill Vance
 * 
 * @hibernate.class table="t_export_action"
 */
public class ExportSecurityActionMap {

	private ExportSecurityValues securityTag = ExportSecurityValues.EXPORT_LEVEL_15; //By default, set this to the most strict security level.
	private DataExportActions exportAction = DataExportActions.ACTION_EXPORT_RESTRICTED; //By default, set this to the most strict export action.
	
    /**
	 * Unique identifier, generated by the Hibernate framework
	 */
	private Long id;
	
	/**
	 * Version, generated by the Hibernate framework
	 */
	private int version;
	
	
	public ExportSecurityActionMap(){}
	public ExportSecurityActionMap(ExportSecurityValues securityTag, DataExportActions requiredAction) throws IllegalArgumentException{
		if(securityTag == null){
			throw new IllegalArgumentException("The value of securityTag is null in the ExportSecurityActionsMap constructor.");
		}else if(requiredAction == null){
			throw new IllegalArgumentException("The value of requiredAction is null in the ExportSecurityActionsMap constructor.");
		}
		
		this.securityTag = securityTag;
		this.exportAction = requiredAction;
	}

	/**
	 * Get the unique identifier, generated by the Hibernate framework
	 * 
	 * @return The unique identifier
	 * 
	 * @hibernate.id column = "c_id" 
	 * 			     generator-class="native"
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Set the unique identifier, generated by the Hibernate framework
	 * 
	 * @param id The unique identifier
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Get the version, generated by the Hibernate framework
	 * 
	 * @return The version
	 * 
	 * @hibernate.version column = "c_version"
	 */
	public int getVersion() {
		return version;
	}

	/**
	 * Set the version, generated by the Hibernate framework
	 * 
	 * @param version The version
	 */
	public void setVersion(int version) {
		this.version = version;
	}
	
	/**
	 * 
	 * @return - the string value of an ExportSecurityValues enumeration
	 * 
	 *    
     * @hibernate.property column="c_security_tag"
	 * 
	 */
	public String getSecurityTag(){
		return securityTag.toString();
	}
	
	
	/**
	 * 
	 * @param securityTag
	 */
	public void setSecurityTag(String securityTag) throws IllegalArgumentException {
		if(securityTag == null || securityTag.length() == 0)
			throw new IllegalArgumentException("The securityTag argument to ExportSecurityActionMap.setSecurityTag cannot be null, nor can it have zero length.");
		else{
			this.securityTag = ExportSecurityValues.valueOf(securityTag);
			}
	}
	
	/**
	 * 
	 * @param exportAction - the export action for this mapping
	 */
	public void setExportAction(String exportAction) throws IllegalArgumentException {
		if(exportAction == null || exportAction.length() == 0)
			throw new IllegalArgumentException("The exportAction argument to ExportSecurityActionMap.setExportAction cannot be null, nor can it have zero length.");
		else {
			this.exportAction = DataExportActions.valueOf(exportAction); 
		}
	}
	
	/**
	 * 
	 * @return - the string value of a DataExportAction enumeration associated with this mapping.
	 * 
	 * @hibernate.property column="c_export_action"
	 */
	public String getExportAction(){
		if (this.exportAction == null)
			return null;
		else
			return exportAction.toString();
	}
	
	public org.psygrid.data.export.dto.ExportSecurityActionMap toDTO(){
		org.psygrid.data.export.dto.ExportSecurityActionMap dtoESAM = new org.psygrid.data.export.dto.ExportSecurityActionMap();
		dtoESAM.setId(this.id);
		dtoESAM.setVersion(this.version);
		dtoESAM.setSecurityTag(this.getSecurityTag());
		dtoESAM.setExportAction(this.getExportAction());
		return dtoESAM;
	}
}
