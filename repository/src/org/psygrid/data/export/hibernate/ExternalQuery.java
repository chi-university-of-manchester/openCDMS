/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/


package org.psygrid.data.export.hibernate;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Represents a parameterized query to be run against an external data source during an export.
 * 
 * During the export of a record the values for a given entry in a given document will be used as a parameter for this query.
 * 
 * @author Terry Child
 * 
 * @hibernate.class table="t_export_external_queries"
 */
public class ExternalQuery {
	
    /**
	 * Unique identifier, generated by the Hibernate framework
	 */
	private Long id;
	
	/**
	 * Version, generated by the Hibernate framework
	 */
	private int version;

	/**
	 * The user readable name of this query.
	 */
	private String name;
	
	/**
	 * The user readable description of this query.
	 */
	private String description;

	/**
	 * The code for the dataset that this query applies to.
	 */
	private String projectCode;

	/**
	 * The name of the document that this query will use to get its parameters.
	 */
	private String documentName;

	/**
	 * The name of the entry that this query will use to get its parameters.
	 */
	private String entryName;

	/**
	 * The jdbc url of the external data source.
	 */
	private String url;
	
	/**
	 * The query to run against the external data source.
	 * 
	 * The query should contain a single parameter which 
	 * will be extracted from the record being exported.
	 */
	private String query;
	
	/**
	 * The username for the external data source.
	 */
	private String user;
	
	/**
	 * The password for the external data source.
	 */
	private String password;	
				
	/**
	 * Default no-arg constructor.
	 */
	public ExternalQuery(){}
	
	
	/**
	 * Get the unique identifier, generated by the Hibernate framework
	 * 
	 * @return The unique identifier
	 * 
	 * @hibernate.id column = "c_id" 
	 * 			     generator-class="native"
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Set the unique identifier, generated by the Hibernate framework
	 * 
	 * @param id The unique identifier
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Get the version, generated by the Hibernate framework
	 * 
	 * @return The version
	 * 
	 * @hibernate.version column = "c_version"
	 */
	public int getVersion() {
		return version;
	}

	/**
	 * Set the version, generated by the Hibernate framework
	 * 
	 * @param version The version
	 */
	public void setVersion(int version) {
		this.version = version;
	}

	

	/**
	 * @return the name
	 * @hibernate.property column="c_name"
	 */
	public String getName() {
		return name;
	}


	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}


	/**
	 * @return the description
	 * @hibernate.property column="c_description"
	 */
	public String getDescription() {
		return description;
	}


	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}


	/**
	 * @return the projectCode
	 * @hibernate.property column="c_project_code"
	 */
	public String getProjectCode() {
		return projectCode;
	}


	/**
	 * @param projectCode the projectCode to set
	 */
	public void setProjectCode(String projectCode) {
		this.projectCode = projectCode;
	}


	/**
	 * @return the documentName
	 * @hibernate.property column="c_document_name"
	 */
	public String getDocumentName() {
		return documentName;
	}


	/**
	 * @param documentName the documentName to set
	 */
	public void setDocumentName(String documentName) {
		this.documentName = documentName;
	}


	/**
	 * @return the entryName
	 * @hibernate.property column="c_entry_name"
	 */
	public String getEntryName() {
		return entryName;
	}


	/**
	 * @param entryName the entryName to set
	 */
	public void setEntryName(String entryName) {
		this.entryName = entryName;
	}


	/**
	 * @return the url
	 * @hibernate.property column="c_url"
	 */
	public String getUrl() {
		return url;
	}


	/**
	 * @param url the url to set
	 */
	public void setUrl(String url) {
		this.url = url;
	}


	/**
	 * @return the query
	 * @hibernate.property column="c_query" length="4096"
	 */
	public String getQuery() {
		return query;
	}


	/**
	 * @param query the query to set
	 */
	public void setQuery(String query) {
		this.query = query;
	}


	/**
	 * @return the user
	 * @hibernate.property column="c_user"
	 */
	public String getUser() {
		return user;
	}


	/**
	 * @param user the user to set
	 */
	public void setUser(String user) {
		this.user = user;
	}


	/**
	 * @return the password
	 * @hibernate.property column="c_password"
	 */
	public String getPassword() {
		return password;
	}


	/**
	 * @param password the password to set
	 */
	public void setPassword(String password) {
		this.password = password;
	}


}
