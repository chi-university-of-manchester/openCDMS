/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.psygrid.data.reporting;

import java.util.Date;
import java.util.List;

import org.psygrid.data.dao.DAOTest;
import org.psygrid.data.reporting.renderer.ExcelRenderer;
import org.psygrid.data.reporting.renderer.PdfRenderer;
import org.psygrid.data.repository.dao.RepositoryDAO;

public class GenerateAllMgmtReportsTest extends DAOTest {

	private RepositoryDAO dao = null;
	private ReportingDAO reportingDAO = null;
	
	protected void setUp() throws Exception {
		super.setUp();
		dao = (RepositoryDAO)ctx.getBean("repositoryDAO");
		reportingDAO = (ReportingDAO)ctx.getBean("reportingDAO");
	}

	protected void tearDown() throws Exception {
		super.tearDown();
		dao = null;
	}

	public void testAllMgmtReports(){
		try{
			String user = "CN=John Ainsworth, OU=Informatics, O=PsyGrid, C=UK";
			List<ManagementReport> reports = reportingDAO.generateAllMgmtReports(user, new Date());
            PdfRenderer pdfRenderer = new PdfRenderer();
            ExcelRenderer xlRenderer = new ExcelRenderer();
            
            System.out.println("Reports returned: "+reports);
            
            for ( ManagementReport report: reports ){
                if ( 0 == report.getRecipients().length ){
                    System.out.println("No recipients for report '"+report.getTitle()+"'");
                }
                else{
                    //form the email
                    //MimeMessage message = mailSender.createMimeMessage();
                    //MimeMessageHelper helper = new MimeMessageHelper(message, true);
                    
                    System.out.println(report.getTitle());
                    //helper.setTo(report.getRecipients());
                    System.out.println("Report Recipients: ");
                    System.out.println(report.getRecipients());
                    //helper.setFrom(sysAdminEmail);
                    //helper.setSubject("PSYGRID: Report - "+report.getTitle());
                    //helper.setSentDate(new Date());
                    //helper.setText(
                      //      "<html><body><p>Please find attached the PsyGrid report '"+report.getTitle()+
                        //    "', generated by the system at "+report.getRequestDate()+"</p>"+
                          //  "<p>Regards,<br/>PsyGrid Admin</p></body></html>", true);
    
                    
                    //create the PDF and attach it
                    ///ByteArrayOutputStream pdfOs = new ByteArrayOutputStream();
                    //pdfRenderer.render(report, pdfOs);
                    //InputStreamSource pdfSrc = new ByteArrayResource(pdfOs.toByteArray());
                    //helper.addAttachment("report.pdf", pdfSrc);
                    
                    //if raw data is to be sent also create the XLS and attach it
                    /*if ( report.isWithRawData() ){
                        //extra try-catch block just for rendering as Excel, so if this fails
                        //then the PDF report will still be emailed
                        try{
                            ByteArrayOutputStream xlOs = new ByteArrayOutputStream();
                            xlRenderer.render(report, xlOs);
                            InputStreamSource xlSrc = new ByteArrayResource(xlOs.toByteArray());
                            //helper.addAttachment("report.xls", xlSrc);
                        }
                        catch(RendererException ex){
                            sLog.error("executeInternal"+": "+ex.getClass().getSimpleName(),ex);
                        }
                        catch(IOException ex){
                            sLog.error("executeInternal"+": "+ex.getClass().getSimpleName(),ex);
                        }
                    }
                    */
                   // if ( sendMails ){
                   //     mailSender.send(message);
                   // }
                    
                    StringBuilder builder = new StringBuilder();
                    builder.append("Report '"+report.getTitle()+"' sent to ");
                    String[] recipients = report.getRecipients();
                    for ( int i=0; i<recipients.length; i++ ){
                        if ( i > 0 ){
                            builder.append(", ");
                        }
                        builder.append(recipients[i]);
                    }
                    
                    System.out.println(builder.toString());
                }
            }
		}
		catch(Exception ex){
			ex.printStackTrace();
			fail("Exception: "+ex);
		}
	}

}