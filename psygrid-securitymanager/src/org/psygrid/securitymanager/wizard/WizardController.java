/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.psygrid.securitymanager.wizard;

import java.awt.Cursor;
import java.awt.event.*;

import java.net.ConnectException;
import java.rmi.RemoteException;

import java.util.*;

import javax.swing.JOptionPane;

import org.psygrid.securitymanager.utils.PropertiesHelper;
import org.psygrid.securitymanager.wizarddescriptors.*;

import org.psygrid.securitymanager.model.*;

import org.psygrid.securitymanager.ui.ModifyEmailAddressPanel;
import org.psygrid.securitymanager.ui.ModifyUserPanel;
import org.psygrid.securitymanager.ui.DeleteUserPanel;
import org.psygrid.securitymanager.ui.AddUserPanel;
import org.psygrid.securitymanager.ui.AddProjectsPanel;
import org.psygrid.securitymanager.ui.MultiUserPanel;
import org.psygrid.securitymanager.ui.ResetPasswordUserPanel;
import org.psygrid.securitymanager.ui.ResetPasswordPanel;
import org.psygrid.securitymanager.ui.SetPasswordPanel;

import org.psygrid.securitymanager.controller.AAController;
import org.psygrid.securitymanager.controller.ModelFetchingController;

import org.psygrid.securitymanager.ExceptionsHelper;

import org.psygrid.security.attributeauthority.service.InputFaultMessage;
import org.psygrid.security.attributeauthority.service.NotAuthorisedFaultMessage;
import org.psygrid.security.attributeauthority.service.ProcessingFaultMessage;


/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is pressed,
 * the controller will update the model to show a new panel and reset the state of
 * the buttons as necessary.
 */
public class WizardController implements ActionListener {
    
    private final static int RETURN_EXCEPTION = -1;
    private final static int RETURN_SUCCESS = 1;
    private final static int RETURN_FAILURE = 2;
	
	private Wizard wizard;
    
    
    /**
     * This constructor accepts a reference to the Wizard component that created it,
     * which it uses to update the button components and access the WizardModel.
     * @param w A callback to the Wizard component that created this controller.
     */    
    public WizardController(Wizard w) {
        wizard = w;
    }
    

    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Wizard class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */    
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        
        if (evt.getActionCommand().equals(Wizard.CANCEL_BUTTON_ACTION_COMMAND))
            cancelButtonPressed();
        else if (evt.getActionCommand().equals(Wizard.BACK_BUTTON_ACTION_COMMAND))
            backButtonPressed();
        else if (evt.getActionCommand().equals(Wizard.NEXT_BUTTON_ACTION_COMMAND))
            nextButtonPressed();
    }
    
    private void cancelButtonPressed() {
        
    	UserModel.getInstance().reset();
    	wizard.close(Wizard.CANCEL_RETURN_CODE);
    }

    private void nextButtonPressed() {
        if (wizard.getDialog().getTitle().equals("Delete User Wizard")) {
        	handleDelete();
        } else if (wizard.getDialog().getTitle().equals("Add User Wizard")) {
        	handleAddUser();
        } else if (wizard.getDialog().getTitle().equals("Modify User Wizard")) {
        	handleModifyUser();
        } else if (wizard.getDialog().getTitle().equals("Change Password")) {
        	handleChangePassword();
        }
    }

    private void backButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
 
        //  Get the descriptor that the current panel identifies as the previous
        //  panel, and display it.
        Object backPanelDescriptor = descriptor.getBackPanelDescriptor();  
        wizard.setCurrentPanel(backPanelDescriptor);
    }

    
    void resetButtonsToPanelRules() {
    
        //  Reset the buttons to support the original panel rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the panel is finishable.
        
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        model.setCancelButtonText(Wizard.CANCEL_TEXT);
        
        //  If the panel in question has another panel behind it, enable
        //  the back button. Otherwise, disable it.
        
        model.setBackButtonText(Wizard.BACK_TEXT);
        
        if (descriptor.getBackPanelDescriptor() != null)
            model.setBackButtonEnabled(Boolean.TRUE);
        else
            model.setBackButtonEnabled(Boolean.FALSE);

        //  If the panel in question has one or more panels in front of it,
        //  enable the next button. Otherwise, disable it.
 
        if (descriptor.getNextPanelDescriptor() != null)
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        else
            model.setNextFinishButtonEnabled(Boolean.FALSE);
 
        //  If the panel in question is the last panel in the series, change
        //  the Next button to Finish. Otherwise, set the text back to Next.
        if (descriptor.getNextPanelDescriptor() instanceof WizardPanelDescriptor.FinishIdentifier) {
            model.setNextFinishButtonText(Wizard.FINISH_TEXT);
        } else {
            model.setNextFinishButtonText(Wizard.NEXT_TEXT);
        }
        
    }
    
    private boolean addUser()
    {
    	boolean success=false;
    	
    	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    	
    	try {
        	success = AAController.getInstance().addToAA();
     	} catch (NotAuthorisedFaultMessage nafm) {
     		ExceptionsHelper.handleNotAuthorisedFault(wizard.getDialog(), nafm);
     	} catch (ProcessingFaultMessage pfm) {
     		ExceptionsHelper.handleProcessingFaultMessage(wizard.getDialog(), pfm);
     	} catch (InputFaultMessage ifm) {
     		ExceptionsHelper.handleInputFaultMessage(wizard.getDialog(), ifm);
     	} catch (RemoteException rex) {
     		ExceptionsHelper.handleRemoteException(wizard.getDialog(), rex);
     	}	
     	
    	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    	
    	return success;
    }
    
    private boolean deleteUser() {
		boolean success = false;

		wizard.getDialog().setCursor(
				Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		try {
			success = AAController.getInstance().deleteFromAA();
		} catch (NotAuthorisedFaultMessage nafm) {
			ExceptionsHelper.handleNotAuthorisedFault(wizard.getDialog(), nafm);
		} catch (ProcessingFaultMessage pfm) {
			ExceptionsHelper.handleProcessingFaultMessage(wizard.getDialog(),
					pfm);
		} catch (InputFaultMessage ifm) {
			ExceptionsHelper.handleInputFaultMessage(wizard.getDialog(), ifm);
		} catch (RemoteException rex) {
			ExceptionsHelper.handleRemoteException(wizard.getDialog(), rex);
		}

		wizard.getDialog().setCursor(
				Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		
		return success;
	}
    
    /**
     * Verify that the user account should be made dormant
     * and if yes, make the user account dormat
     * if no, return false
     * @return true if user account is 
     */
    private boolean makeUserAccountDormant() {
    	
		wizard.getDialog().setCursor(
				Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		boolean success = false;
		
		try {
			if (AAController.getInstance().userHasNoProjects()) {
				// Ask the operator if the user should be made dormant
				// DormantUserAccountDialog dlg = new
				// DormantUserAccountDialog(null);
				String title = PropertiesHelper.getPropertyHelper()
						.getStringFor(
								"SecurityManager.account.dormant.title");
				StringBuilder message = new StringBuilder();
				message.append(PropertiesHelper.getPropertyHelper()
						.getStringFor(
								"SecurityManager.account.dormant.message"));
				// application.refreshContentPane();
				int i = JOptionPane.showConfirmDialog(wizard.getOwner(),
						message.toString(), title,
						JOptionPane.YES_NO_OPTION,
						JOptionPane.WARNING_MESSAGE);
				if (i == JOptionPane.YES_OPTION) {
					String title2 = PropertiesHelper
							.getPropertyHelper()
							.getStringFor(
									"SecurityManager.account.dormant.title");
					StringBuilder message2 = new StringBuilder();
					message2
							.append(PropertiesHelper
									.getPropertyHelper()
									.getStringFor(
											"SecurityManager.really.disable.account"));
					// application.refreshContentPane();
					int j = JOptionPane.showConfirmDialog(
							wizard.getOwner(), message2.toString(), title2,
							JOptionPane.YES_NO_OPTION,
							JOptionPane.WARNING_MESSAGE);
					if (j == JOptionPane.YES_OPTION) {
						success = AAController.getInstance().makeUserAccountDormant();
					} 
				}
			}
		} catch (NotAuthorisedFaultMessage nafm) {
			ExceptionsHelper.handleNotAuthorisedFault(wizard.getDialog(),
					nafm);
		} catch (ProcessingFaultMessage pfm) {
			ExceptionsHelper.handleProcessingFaultMessage(wizard
					.getDialog(), pfm);
		} catch (InputFaultMessage ifm) {
			ExceptionsHelper.handleInputFaultMessage(wizard.getDialog(),
					ifm);
		} catch (RemoteException rex) {
			ExceptionsHelper.handleRemoteException(wizard.getDialog(), rex);
		}
		
		wizard.getDialog().setCursor(
				Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

		return success;
    }
    
    public Object nextAddProject()
    {
		WizardModel model = wizard.getModel();
		WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();;
		Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();    
		WizardPanelDescriptor currentDescriptor = (WizardPanelDescriptor)descriptor;
		
    	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		int userExists = userExists();
    	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

		
    	if (wizard.getDialog().getTitle().equals("Modify User Wizard")) {
    		//make sure we update the user model if we're back at the first page.
    		if (currentDescriptor instanceof ModifyUserDescriptor) {
    			((ModifyUserPanel)((ModifyUserDescriptor)currentDescriptor).getPanelComponent()).updateUserModel();
    		} else if (currentDescriptor instanceof MultiUserPanelDescriptor) {
    			UserModel.getInstance().setNames(((MultiUserPanel)descriptor.getPanelComponent()).getSelectedName());
    		}
    		
    		if (userExists == RETURN_FAILURE) {
				try {
					wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
					ArrayList<String> multiUsers = AAController.getInstance().verifyMultiUsers();
					wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
					
    				if (multiUsers.size() > 0) {
        				if (multiUsers.size() == 1) {
        					UserModel.getInstance().setNames(multiUsers.get(0));	
        				} else {
            				((ModifyUserDescriptor)currentDescriptor).setNextDescriptor(MultiUserPanelDescriptor.IDENTIFIER);
            				MultiUserPanelDescriptor multiDescriptor = (MultiUserPanelDescriptor)wizard.getModel().getPanel(MultiUserPanelDescriptor.IDENTIFIER);
            				((MultiUserPanel)multiDescriptor.getPanelComponent()).refreshPanel(multiUsers);
            				nextPanelDescriptor = currentDescriptor.getNextPanelDescriptor();
            				((ModifyUserDescriptor)currentDescriptor).setNextDescriptor(AddProjectsDescriptor.IDENTIFIER);
        				}
    				} else {
	        			((ModifyUserPanel)currentDescriptor.getPanelComponent()).refreshPanel("User does not exist.  Please try again.");
	        			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
    				}
				} catch (RemoteException rex) {
					//handle this
				}
    		} else if (userExists == RETURN_EXCEPTION)
    		{
    			nextPanelDescriptor = currentDescriptor;
    		}
    	} else if (wizard.getDialog().getTitle().equals("Add User Wizard")){
    		
    		if (descriptor instanceof AddUserDescriptor)
    		{
    			((AddUserPanel)((WizardPanelDescriptor)descriptor).getPanelComponent()).updateUserModel();
    		}
    		
    		if (userExists == RETURN_SUCCESS) {
    			((AddUserPanel)currentDescriptor.getPanelComponent()).refreshPanel("User already exists.  Please try again.");
    			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
			} else  if (userExists == RETURN_FAILURE) {
    			String validation = ((AddUserPanel)currentDescriptor.getPanelComponent()).validateInput(); 
    			if ( validation != null) {
        			((AddUserPanel)currentDescriptor.getPanelComponent()).refreshPanel(validation);
        			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
    			}
			} else if (userExists == RETURN_EXCEPTION) {
				nextPanelDescriptor = currentDescriptor;
			}
    	}
    	return nextPanelDescriptor;
    }
    
    public boolean modifyUser()
    {
    	boolean success = false;
    	try {
    		success = AAController.getInstance().modifyUser();
     	} catch (NotAuthorisedFaultMessage nafm) {
     		ExceptionsHelper.handleNotAuthorisedFault(wizard.getDialog(), nafm);
     	} catch (ProcessingFaultMessage pfm) {
     		ExceptionsHelper.handleProcessingFaultMessage(wizard.getDialog(), pfm);
     	} catch (InputFaultMessage ifm) {
     		ExceptionsHelper.handleInputFaultMessage(wizard.getDialog(), ifm);
     	} catch (RemoteException rex) {
     		ExceptionsHelper.handleRemoteException(wizard.getDialog(), rex);
     	}	
     	return success;
    }

    public int userExists()
    {
    	int returnValue = -1;
    	
    	try {
    		boolean success = AAController.getInstance().userExists();
         	if (success) {
         		returnValue = RETURN_SUCCESS;
         	} else {
         		returnValue = RETURN_FAILURE;
         	}
    	} catch (NotAuthorisedFaultMessage nafm) {
     		ExceptionsHelper.handleNotAuthorisedFault(wizard.getDialog(), nafm);
     	} catch (ProcessingFaultMessage pfm) {
     		ExceptionsHelper.handleProcessingFaultMessage(wizard.getDialog(), pfm);
     	} catch (InputFaultMessage ifm) {
     		ExceptionsHelper.handleInputFaultMessage(wizard.getDialog(), ifm);
     	} catch (RemoteException rex) {
     		ExceptionsHelper.handleRemoteException(wizard.getDialog(), rex);
     	}	
     	
     	return returnValue;
    }
    
    public boolean userAccountIsDormant()
    {
    	boolean returnValue = true;
    	
    	try {
    		return AAController.getInstance().userAccountIsDormant();
    	} catch (NotAuthorisedFaultMessage nafm) {
     		ExceptionsHelper.handleNotAuthorisedFault(wizard.getDialog(), nafm);
     	} catch (ProcessingFaultMessage pfm) {
     		ExceptionsHelper.handleProcessingFaultMessage(wizard.getDialog(), pfm);
     	} catch (InputFaultMessage ifm) {
     		ExceptionsHelper.handleInputFaultMessage(wizard.getDialog(), ifm);
     	} catch (RemoteException rex) {
     		ExceptionsHelper.handleRemoteException(wizard.getDialog(), rex);
     	} catch (ConnectException cex) {
     		ExceptionsHelper.handleConnectException(wizard.getDialog(), cex);
     	}	
     	
     	return returnValue;
    }
    
    public boolean resetPassword()
    {
    	boolean success = false;
    	try {
    		success = AAController.getInstance().resetPassword();
     	} catch (NotAuthorisedFaultMessage nafm) {
     		ExceptionsHelper.handleNotAuthorisedFault(wizard.getDialog(), nafm);
     	} catch (ProcessingFaultMessage pfm) {
     		ExceptionsHelper.handleProcessingFaultMessage(wizard.getDialog(), pfm);
     	} catch (InputFaultMessage ifm) {
     		ExceptionsHelper.handleInputFaultMessage(wizard.getDialog(), ifm);
     	} catch (RemoteException rex) {
     		ExceptionsHelper.handleRemoteException(wizard.getDialog(), rex);
     	}	
     	return success;
    }
    
    public void handleDelete()
    {
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        
        if (wizard.getDialog().getTitle().equals("Delete User Wizard")) {
    		
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        	int userExists = userExists();

        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        	
        	if (descriptor instanceof DeleteUserDescriptor) {
        		((DeleteUserPanel)descriptor.getPanelComponent()).updateUserModel();
        	} else if (descriptor instanceof MultiUserPanelDescriptor) {
    			UserModel.getInstance().setNames(((MultiUserPanel)descriptor.getPanelComponent()).getSelectedName());
        	}
        	
        	if (descriptor.getNextPanelDescriptor().equals(DeleteProjectsDescriptor.IDENTIFIER)) {
    			if (userExists == RETURN_FAILURE)
    			{
    				try { 
    					ArrayList<String> multiUsers = AAController.getInstance().verifyMultiUsers();
    					//this should never happen because it should be caught above but just in case
    					if (multiUsers.size() > 0) {
    						if (multiUsers.size() == 1) {
    							UserModel.getInstance().setNames(multiUsers.get(0));
    						} else {
    		    				WizardPanelDescriptor currentDescriptor = (WizardPanelDescriptor)descriptor;
    		    				((DeleteUserDescriptor)currentDescriptor).setNextDescriptor(MultiUserPanelDescriptor.IDENTIFIER);
    		    				MultiUserPanelDescriptor multiDescriptor = (MultiUserPanelDescriptor)wizard.getModel().getPanel(MultiUserPanelDescriptor.IDENTIFIER);
    		    				((MultiUserPanel)multiDescriptor.getPanelComponent()).refreshPanel(multiUsers);
    		    				nextPanelDescriptor = currentDescriptor.getNextPanelDescriptor();
    		    				((DeleteUserDescriptor)currentDescriptor).setNextDescriptor(DeleteProjectsDescriptor.IDENTIFIER);
    						}
    					} else {
    		    			WizardPanelDescriptor currentDescriptor = (WizardPanelDescriptor)descriptor;
    		    			((DeleteUserPanel)currentDescriptor.getPanelComponent()).refreshPanel("User does not exist.  Please try again.");
    		    			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
    					}
    				} catch (RemoteException rex) {
    					
    				}
    			} else if (userExists == RETURN_EXCEPTION) {
    				nextPanelDescriptor = (WizardPanelDescriptor)descriptor;
    			}
    		}
        }

        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier) {

        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        	//if no projects are selected, then nothing to delete from; tell the user
    		if (UserModel.getInstance().getProjects().size() == 0)
    		{
    			wizard.close(Wizard.FINISH_RETURN_CODE);
    			JOptionPane.showMessageDialog(wizard.getOwner(), "No projects were selected from which to delete the user. ", "User Deletion", JOptionPane.ERROR_MESSAGE);
            	UserModel.getInstance().reset();
            	ModelFetchingController.getInstance().reset();
    		} else if (deleteUser())
    		{
    			boolean userDormant = makeUserAccountDormant();
    			wizard.close(Wizard.FINISH_RETURN_CODE);
        		if (userDormant) {
            		JOptionPane.showMessageDialog(wizard.getOwner(), "User " + UserModel.getInstance().getFirstname() + " " + UserModel.getInstance().getLastname() + " with login name " + UserModel.getInstance().getFirstname() + UserModel.getInstance().getLastname() + " has been deleted and the account was made dormant.", "User Deletion", JOptionPane.INFORMATION_MESSAGE );
        		} else {
        			JOptionPane.showMessageDialog(wizard.getOwner(), "User " + UserModel.getInstance().getFirstname() + " " + UserModel.getInstance().getLastname() + " with login name " + UserModel.getInstance().getFirstname() + UserModel.getInstance().getLastname() + " has been deleted but was not made dormant.", "User Deletion", JOptionPane.INFORMATION_MESSAGE );
        		}
        		UserModel.getInstance().reset();
            	ModelFetchingController.getInstance().reset();
    		} 

    		wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
        } else {        
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        	wizard.setCurrentPanel(nextPanelDescriptor);

        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        }
    }
    
    public void handleModifyUser()
    {
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        
        if (descriptor instanceof ModifyEmailAddressDescriptor) {
        	((ModifyEmailAddressPanel)descriptor.getPanelComponent()).updateEmailAddress();
        }

        if (descriptor.getNextPanelDescriptor().equals(AddProjectsDescriptor.IDENTIFIER)) {
    		if (descriptor instanceof ModifyUserDescriptor) {
    			((ModifyUserPanel)((ModifyUserDescriptor)descriptor).getPanelComponent()).updateUserModel();
    		} else if (descriptor instanceof MultiUserPanelDescriptor) {
    			UserModel.getInstance().setNames(((MultiUserPanel)descriptor.getPanelComponent()).getSelectedName());
    		}
    		
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    		int userExists = userExists();
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    		
    		if (userExists == RETURN_FAILURE) {
				try {
	    			ArrayList<String> multiUsers = AAController.getInstance().verifyMultiUsers();
    				if (multiUsers.size() > 0) {
        				if (multiUsers.size() == 1) {
        					UserModel.getInstance().setNames(multiUsers.get(0));	
        				} else {
            				((ModifyUserDescriptor)descriptor).setNextDescriptor(MultiUserPanelDescriptor.IDENTIFIER);
            				MultiUserPanelDescriptor multiDescriptor = (MultiUserPanelDescriptor)wizard.getModel().getPanel(MultiUserPanelDescriptor.IDENTIFIER);
            				((MultiUserPanel)multiDescriptor.getPanelComponent()).refreshPanel(multiUsers);
            				nextPanelDescriptor = descriptor.getNextPanelDescriptor();
            				((ModifyUserDescriptor)descriptor).setNextDescriptor(AddProjectsDescriptor.IDENTIFIER);
        				}
    				} else {
	        			((ModifyUserPanel)descriptor.getPanelComponent()).refreshPanel("User does not exist.  Please try again.");
	        			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
    				}
				} catch (RemoteException rex) {
					//handle this
				}
    		} else if (userExists == RETURN_EXCEPTION)
    		{
    			nextPanelDescriptor = descriptor;
    		} else if (userExists == RETURN_SUCCESS){
    			//is the user account dormant, if so then it cannot be modified
    			if(userAccountIsDormant()){
    				((ModifyUserPanel)descriptor.getPanelComponent()).refreshPanel("User account is dormant and cannot be modified.");
        			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();  				
    			}
    		}
        }
        
        
        if (descriptor.getNextPanelDescriptor().equals(AddGroupsDescriptor.IDENTIFIER)) {
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        	if (UserModel.getInstance().getProjects().size()==0) {
        		WizardPanelDescriptor currentDescriptor = (WizardPanelDescriptor)descriptor;
        		((AddProjectsPanel)currentDescriptor.getPanelComponent()).refreshPanel("You must assign at least one project");
    			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
        	}
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier) {
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    		
    		if (modifyUser())
    		{
    			wizard.close(Wizard.FINISH_RETURN_CODE);
    			JOptionPane.showMessageDialog(wizard.getOwner(), "User was modified successfully", "User Modification", JOptionPane.INFORMATION_MESSAGE);
    			UserModel.getInstance().reset();
    			ModelFetchingController.getInstance().reset();
    		}
    		wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        } else {        
        	wizard.setCurrentPanel(nextPanelDescriptor);
        }
    }
    
    public void handleAddUser()
    {
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        
        if (descriptor.getNextPanelDescriptor().equals(AddProjectsDescriptor.IDENTIFIER)) {
    		if (descriptor instanceof AddUserDescriptor)
    		{
    	    	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

    			((AddUserPanel)((WizardPanelDescriptor)descriptor).getPanelComponent()).updateUserModel();

    	    	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    		}

        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    		int userExists = userExists();
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    		if (userExists == RETURN_SUCCESS) {
    			((AddUserPanel)descriptor.getPanelComponent()).refreshPanel("User already exists.  Please try again.");
    			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
			} else  if (userExists == RETURN_FAILURE) {
    			String validation = ((AddUserPanel)descriptor.getPanelComponent()).validateInput(); 
    			if ( validation != null) {
        			((AddUserPanel)descriptor.getPanelComponent()).refreshPanel(validation);
        			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
    			}
			} else if (userExists == RETURN_EXCEPTION) {
				nextPanelDescriptor = descriptor;
			}
        }
        
        if (descriptor.getNextPanelDescriptor().equals(AddGroupsDescriptor.IDENTIFIER)) {
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        	if (UserModel.getInstance().getProjects().size()==0) {
        		WizardPanelDescriptor currentDescriptor = (WizardPanelDescriptor)descriptor;
        		((AddProjectsPanel)currentDescriptor.getPanelComponent()).refreshPanel("You must assign at least one project");
    			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
        	}
        	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
        if (descriptor instanceof SetPasswordPanelDescriptor)
        {
        	SetPasswordPanel passwordPanel = (SetPasswordPanel)descriptor.getPanelComponent();
        	if (!((SetPasswordPanel)descriptor.getPanelComponent()).confirmMatch()) {
        		nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
        		passwordPanel.clearFields();
            	JOptionPane.showMessageDialog(wizard.getOwner(), "Passwords do not match.  Please try again.", "Password Set", JOptionPane.ERROR_MESSAGE);
        	} else if (!((SetPasswordPanel)descriptor.getPanelComponent()).confirmSixCharacters()) {
        		nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
        		passwordPanel.clearFields();
        		JOptionPane.showMessageDialog(wizard.getOwner(), "Password must be at least six characters in length.  Please try again.", "Password Set", JOptionPane.ERROR_MESSAGE);
        	} else
        	{
            	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        		passwordPanel.updatePassword();
            	wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        	}
        }
        
        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier) {
        	if (addUser())
        	{
        		wizard.close(Wizard.FINISH_RETURN_CODE);
            	JOptionPane.showMessageDialog(wizard.getOwner(), "User " + UserModel.getInstance().getFirstname() + " " + UserModel.getInstance().getLastname() + " has been created with login name " + UserModel.getInstance().getFirstname() + UserModel.getInstance().getLastname() + ".", "User Creation", JOptionPane.INFORMATION_MESSAGE);
        		UserModel.getInstance().reset();
        		ModelFetchingController.getInstance().reset();
        	}
        } else {        
        	wizard.setCurrentPanel(nextPanelDescriptor);
        }
    }
    
    public void handleChangePassword()
    {
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        
        if (nextPanelDescriptor.equals(ResetPasswordPanelDescriptor.IDENTIFIER)) {
    		//make sure we update the user model if we're back at the first page.
    		if (descriptor instanceof ResetPasswordUserPanelDescriptor) {
    			((ResetPasswordUserPanel)((ResetPasswordUserPanelDescriptor)descriptor).getPanelComponent()).updateUserModel();
    		} else if (descriptor instanceof MultiUserPanelDescriptor) {
    			UserModel.getInstance().setNames(((MultiUserPanel)descriptor.getPanelComponent()).getSelectedName());
    		}
    		
			wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    		int userExists = userExists();
			wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    		
        	if (userExists == RETURN_FAILURE) {
				try {
	    			ArrayList<String> multiUsers = AAController.getInstance().verifyMultiUsers();
    				if (multiUsers.size() > 0) {
        				if (multiUsers.size() == 1) {
        					UserModel.getInstance().setNames(multiUsers.get(0));	
        				} else {
            				((ResetPasswordUserPanelDescriptor)descriptor).setNextDescriptor(MultiUserPanelDescriptor.IDENTIFIER);
            				MultiUserPanelDescriptor multiDescriptor = (MultiUserPanelDescriptor)wizard.getModel().getPanel(MultiUserPanelDescriptor.IDENTIFIER);
            				((MultiUserPanel)multiDescriptor.getPanelComponent()).refreshPanel(multiUsers);
            				nextPanelDescriptor = descriptor.getNextPanelDescriptor();
            				((ResetPasswordUserPanelDescriptor)descriptor).setNextDescriptor(ResetPasswordPanelDescriptor.IDENTIFIER);
        				}
    				} else {
	        			((ResetPasswordUserPanel)descriptor.getPanelComponent()).refreshPanel("User does not exist.  Please try again.");
	        			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
    				}
				} catch (RemoteException rex) {
					//handle this
				}
    		} else if (userExists == RETURN_EXCEPTION) {
    			nextPanelDescriptor = descriptor.getPanelDescriptorIdentifier();
    		}
        }
        
        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier) {
    		wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ResetPasswordPanel panel = (ResetPasswordPanel)descriptor.getPanelComponent();
            if (panel.confirmMatch())
            {
            	if (panel.confirmSixCharacters())
            	{
            		//set the password in the user model (we know they match are six characters now)
            		panel.updatePassword();
            		if (resetPassword()) {
            			wizard.close(Wizard.FINISH_RETURN_CODE);
            			JOptionPane.showMessageDialog(wizard.getOwner(), "Password has been reset for " + UserModel.getInstance().getFirstname() + " " + UserModel.getInstance().getLastname() + ".", "Change Password", JOptionPane.INFORMATION_MESSAGE);
                    	UserModel.getInstance().reset();
                    	ModelFetchingController.getInstance().reset();
            		} else {
            			panel.clearFields();
            		}
            	} else {
            		panel.clearFields();
            		JOptionPane.showMessageDialog(wizard.getOwner(), "Password must be at least six characters in length.  Please try again.", "Password Reset", JOptionPane.ERROR_MESSAGE);
        		}

            } else {
    			panel.clearFields();
            	JOptionPane.showMessageDialog(wizard.getOwner(), "Passwords do not match.  Please try again.", "Password Reset", JOptionPane.ERROR_MESSAGE);
    		}
            
    		wizard.getDialog().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        } else {        
        	wizard.setCurrentPanel(nextPanelDescriptor);
        }
    	
    }
    
    
}
