/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.psygrid.randomization.model.hibernate;

import java.util.Map;

/**
 * The base class for all classes intended to be persisted by
 * Hibernate.
 * 
 * Making all persistable classes sub-classes of Persistent ensures
 * that all persisted objects have a unique identifier, which is not
 * dependent on the class of the object.
 * 
 * @author Rob Harper
 * 
 * @hibernate.class table="t_persistents"
 * 
 */
public abstract class Persistent {

    /**
     * Unique identifier, generated by the Hibernate framework
     */
    private Long id;
    
    /**
     * Version, generated by the Hibernate framework
     */
    private int version;
    
    /**
     * Default no-arg constructor, as required by the Hibernate framework
     * for all persistable classes
     */
    public Persistent(){};

    /**
     * Get the unique identifier, generated by the Hibernate framework
     * 
     * @return The unique identifier
     * 
     * @hibernate.id column = "c_id" 
     *               generator-class="native"
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the unique identifier, generated by the Hibernate framework
     * 
     * @param id The unique identifier
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the version, generated by the Hibernate framework
     * 
     * @return The version
     * 
     * @hibernate.version column = "c_version"
     */
    public int getVersion() {
        return version;
    }

    /**
     * Set the version, generated by the Hibernate framework
     * 
     * @param version The version
     */
    public void setVersion(int version) {
        this.version = version;
    }

    /**
     * This implementation is based on the discussion presented at
     * http://djeang.blogspot.com/2005/08/override-equals-and-hashcode-methods.html
     */
    public boolean equals(Object obj) {
        if ( this == obj){ 
            return true;
        }
        if ( obj == null ){
            return false;
        }
        // We should really return false if the classes are different, but obj could be a proxy.
        // A proxy is always a subclass - so return false if obj is not a subclass of this.
    	if (!this.getClass().isAssignableFrom(obj.getClass()))
		{
			return false;
		}
        Persistent p = (Persistent) obj;
        if (this.id == null || p.getId() == null){ 
            return false;
        }
        return this.id.equals(p.getId());
    }
    
    /**
     * This implementation is based on the discussion presented at
     * http://djeang.blogspot.com/2005/08/override-equals-and-hashcode-methods.html
     */
    public int hashCode() {
        if (this.id == null){
            return super.hashCode();
        }
        return this.id.hashCode();
    }

    public String toString() {
        return this.getClass().getName() + " " + this.id;
    }
    
    public abstract org.psygrid.randomization.model.dto.Persistent toDTO(Map<Persistent, org.psygrid.randomization.model.dto.Persistent> dtoRefs);
    
    public void toDTO(org.psygrid.randomization.model.dto.Persistent dtoP, Map<Persistent, org.psygrid.randomization.model.dto.Persistent> dtoRefs){
        dtoP.setId(this.id);
        dtoP.setVersion(this.version);
    }
    
    public void fromDTO(org.psygrid.randomization.model.dto.Persistent dtoP, Map<org.psygrid.randomization.model.dto.Persistent, Persistent> dtoRefs){
        this.id = dtoP.getId();
        this.version = dtoP.getVersion();
    }
    
}
