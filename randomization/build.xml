<!--
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
-->

<!-- Ant build script for PsyGrid randomization -->
<project name="PsyGrid Randomization" basedir="." default="all">

	<description>PsyGrid Data Randomization Ant build file</description>

	<property file="../psygrid-build/common.build.properties" />
	<property file="../psygrid-build/unified.build.properties" />
    <property file="../psygrid-build/versions.properties" />

	<!-- Set global properties for the build -->
	<property file="build.properties"/>

	<property name="build.dir" value="${basedir}/build"/>
	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="etc.dir" value="${basedir}/etc"/>
	<property name="src.dir" value="${basedir}/src"/>
	<property name="test.dir" value="${basedir}/test"/>
	<property name="dist.dir" value="${basedir}/dist/"/>
	<property name="gen.dir" value="${basedir}/gen/"/>
	<property name="doc.dir" value="${basedir}/doc/"/>
	<property name="common.lib.dir" value="${basedir}/../psygrid-common/lib"/>
	<property name="common.dist.dir" value="${basedir}/../psygrid-common/dist"/>

	<path id="compile.class.path">
		<!--
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		-->
		<fileset dir="${common.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement path="${build.dir}" />
		<fileset dir="../security/dist">
			<include name="psygrid-security*.jar" />
		</fileset>
		<fileset dir="${common.dist.dir}">
		    <include name="common-client_*.jar"/>
		</fileset>
	</path>

	<target name="init" description="Initialization for the build">
		<tstamp/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${gen.dir}"/>
		<mkdir dir="${doc.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/sql"/>
		<mkdir dir="${etc.dir}/security"/>

		<taskdef
			name="axis-java2wsdl"
			classname="org.apache.axis.tools.ant.wsdl.Java2WsdlAntTask">
			<classpath refid="compile.class.path" />
		</taskdef>

		<taskdef
			name="axis-wsdl2java"
			classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask">
			<classpath refid="compile.class.path" />
		</taskdef>

		<taskdef
			name="xdoclet"
			classname="org.xdoclet.ant.XDocletTask">
			<classpath refid="compile.class.path" />
		</taskdef>

		<taskdef
			name="hibernatetool"
			classname="org.hibernate.tool.ant.HibernateToolTask">
			<classpath refid="compile.class.path" />
		</taskdef>

	</target>

	<target name="clean" description="Clean up">
		<delete failonerror="false" includeEmptyDirs="true">
			<fileset dir="${build.dir}"/>
			<fileset dir="${doc.dir}"/>
			<fileset dir="${gen.dir}/org"/>
			<fileset dir="${etc.dir}/security"/>
		</delete>
		<delete failonerror="false">
			<fileset dir="${dist.dir}">
				<include name="*.jar"/>
				<include name="*.war"/>
			</fileset>
		</delete>
		<delete file="${etc.dir}/applicationContext.xml"/>
		<delete file="${src.dir}/applicationCtx.xml"/>
		<delete file="${test.dir}/applicationContext.xml"/>
		<delete file="${etc.dir}/wsdl/randomization.wsdl"/>
		<delete file="${gen.dir}/server-config.wsdd"/>
	</target>

	<target name="compile" depends="init" description="Compile java source files">
		<javac target="1.5" source="1.5" sourcepath="" destdir="${build.dir}" classpathref="compile.class.path" debug="true">
			<src path="${src.dir}"/>
			<src path="${gen.dir}"/>
			<include name="**/*.java"/>
  		</javac>
	</target>

   	<target name="xdoclet2" depends="compile" description="Generate Hibernate mapping and config files using XDoclet2">

	    <xdoclet>

	        <!-- the files that will be parsed for Hibernate XDoclet tags. -->
	    	<fileset dir="${src.dir}">
	            <include name="**/model/hibernate/*.java"/>
	        </fileset>

	        <!-- generate the Hibernate mapping files -->
	        <component
	            classname="org.xdoclet.plugin.hibernate.HibernateMappingPlugin"
	            destdir="${build.dir}"
	            version="${hibernate.version}"
	        />

	    	<!-- generate the Hibernate configuration file -->
	    	<component
	    		classname="org.xdoclet.plugin.hibernate.HibernateConfigPlugin"
	    	 	destdir="${build.dir}"
	    		version="${hibernate.version}"
	    		jdbcdriver="${database.driver}"
	    		dialect="${database.dialect}"
	    		jdbcurl="${database.url}${database.schema.randomization}"
	    		jdbcusername="${database.user}"
	    		jdbcpassword="${database.password}"
	    	/>

		</xdoclet>

   	</target>

	<target name="do-drop-schema" if="do.drop.schema" description="Drop the database schema">
		<sql
		    driver="${database.driver}"
		    url="${database.url}${database.schema.randomization}"
		    userid="${database.user}"
		    password="${database.password}"
			classpathref="compile.class.path"
			src="${dist.dir}/sql/drop-${database.provider}.sql"/>
	</target>

	<target name="drop-schema"
		 	description="Drop the database schema, if the property for exporting the schema is set to true" >
		<echo message="schema.export=${schema.export}"/>
		<condition property="do.drop.schema">
			<and>
				<equals arg1="${schema.export}" arg2="true"/>
				<available file="${dist.dir}/sql/drop-${database.provider}.sql"/>
			</and>
		</condition>
		<antcall target="do-drop-schema"/>
	</target>

	<target name="generateschema" depends="xdoclet2" description="Generate database schema">

		<!-- run the export to the database (if export=true) -->
		<hibernatetool destdir="${build.dir}">
			<configuration configurationfile="${build.dir}/hibernate.cfg.xml" />
			<hbm2ddl export="${schema.export}"
					 drop="false"/>
  		</hibernatetool>

		<!-- generate the "drop" SQL script, containing drop statements only -->
		<hibernatetool destdir="${build.dir}">
			<configuration configurationfile="${build.dir}/hibernate.cfg.xml" />
			<hbm2ddl export="false"
					 drop="true"
					 create="false"
					 outputfilename="drop.sql"/>
  		</hibernatetool>

		<!-- generate the "create" SQL script, containing no drop statements -->
		<hibernatetool destdir="${build.dir}">
			<configuration configurationfile="${build.dir}/hibernate.cfg.xml" />
			<hbm2ddl export="false"
					 drop="false"
					 create="true"
					 outputfilename="create.sql"/>
  		</hibernatetool>

		<copy todir="${src.dir}">
			<fileset dir="${build.dir}">
				<include name="**/*.cfg.xml"/>
			</fileset>
		</copy>
		<copy todir="${src.dir}/${randomization.hibernate.package}">
			<fileset dir="${build.dir}/${randomization.hibernate.package}">
				<include name="**/*.hbm.xml"/>
			</fileset>
		</copy>

		<!-- copy the drop and create scripts to files with provider specific names -->
		<copy file="${build.dir}/drop.sql" tofile="${dist.dir}/sql/drop-${database.provider}.sql"/>
		<copy file="${build.dir}/create.sql" tofile="${dist.dir}/sql/create-${database.provider}.sql"/>

	</target>

	<target name="compile-subset" depends="init" description="Compile a subset of the java source files">
		<javac target="1.5" source="1.5" sourcepath="" destdir="${build.dir}" classpathref="compile.class.path" debug="true">
			<src path="${src.dir}"/>
			<include name="**/*.java"/>
			<exclude name="org/psygrid/randomization/client/*.java"/>
  		</javac>
	</target>

	<target name="export-wsdl" depends="compile-subset" description="Generate WSDL">

		<!-- repository web-service -->
		<axis-java2wsdl
			classname="org.psygrid.randomization.Randomization"
			style="rpc"
			namespace="urn:randomization.psygrid.org"
			location="${randomization.url}/randomization/services/randomization"
			output="${etc.dir}/wsdl/randomization.wsdl"
			extraclasses="org.psygrid.randomization.model.dto.Allocation
						  org.psygrid.randomization.model.dto.BlockItem
			  			  org.psygrid.randomization.model.dto.PersistableRNG
						  org.psygrid.randomization.model.dto.BlockRandomizer
						  org.psygrid.randomization.model.dto.IBRpbrblRandomizer
					  	  org.psygrid.randomization.model.dto.RpmrblRandomizer
						  org.psygrid.randomization.model.dto.StratifiedRandomizer
						  org.psygrid.randomization.model.dto.Stratum
						  org.psygrid.randomization.model.dto.StratumCombination
						  org.psygrid.randomization.model.dto.StratumPointer
						  org.psygrid.randomization.model.dto.Treatment"
		/>

	</target>

	<target name="eclipse-refresh" if="eclipse.running" description="Refresh eclipse before running wsdl2java">
		<eclipse.refreshLocal resource="${eclipse.project}/src" depth="infinite"/>
	</target>

	<target name="export-java" depends="export-wsdl, eclipse-refresh" description="Generate java and wsdd from wsdl">

		<!-- randomization web-service -->
		<axis-wsdl2java
			deployscope="Application"
			output="${gen.dir}"
			serverside="true"
			skeletondeploy="false"
			url="${etc.dir}/wsdl/randomization.wsdl"
			verbose="true"
			debug="true"
		/>

		<!-- move deploy.wsdd and undeploy.wsdd so that they don't get overwritten -->
		<move file="${gen.dir}/org/psygrid/randomization/deploy.wsdd"
			  tofile="${gen.dir}/org/psygrid/randomization/deploy-randomization.wsdd"
		/>
		<move file="${gen.dir}/org/psygrid/randomization/undeploy.wsdd"
			  tofile="${gen.dir}/org/psygrid/randomization/undeploy-randomization.wsdd"
		/>

		<!-- delete the generated files that we already have versions of -->
		<delete includeemptydirs="true">
			<fileset dir="${gen.dir}">
				<include name="**/Randomization.java"/>
				<include name="**/Parameter.java"/>
				<include name="**/*SoapBindingImpl.java"/>
				<include name="**/*Fault.java"/>
			</fileset>
		</delete>

		<!-- delete generated JavaBeans -->
		<delete includeemptydirs="true">
			<fileset dir="${gen.dir}/org/psygrid/randomization/model"/>
		</delete>

		<!-- generate server-config.wsdd -->
		<java
		  	classname="org.apache.axis.utils.Admin"
		  	fork="true"
		  	failonerror="true"
		  	classpathref="compile.class.path"
		  	dir="${gen.dir}">
		   	<arg value="server" />
		    <arg file="${gen.dir}/org/psygrid/randomization/deploy-randomization.wsdd" />
		</java>

	</target>

	<target name="generate-application-ctx-xml">
		<copy file="${etc.dir}/templates/applicationCtx.xml"
			  tofile="${build.dir}/applicationCtx.xml"
			  overwrite="true"/>
		<replace file="${build.dir}/applicationCtx.xml"
				 propertyFile="build.properties">
			<replacefilter
			    token="@username@"
			    value="${database.user}"/>
			<replacefilter
			    token="@password@"
			    value="${database.password}"/>
			<replacefilter
			    token="@driver@"
			    value="${database.driver}"/>
			<replacefilter
			    token="@db_url@"
			    value="${database.url}"/>
			<replacefilter
			    token="@db_schema@"
			    value="${database.schema.randomization}"/>
			<replacefilter
			    token="@dialect@"
			    value="${database.dialect}"/>
		</replace>
		<copy file="${build.dir}/applicationCtx.xml" tofile="${src.dir}/applicationCtx.xml"/>
		<copy file="${build.dir}/applicationCtx.xml" tofile="${test.dir}/applicationContext.xml"/>
	</target>

	<target name="generate-application-context-xml">
		<copy file="${etc.dir}/templates/applicationContext.xml"
			  tofile="${etc.dir}/applicationContext.xml"
			  overwrite="true"/>
		<replace file="${etc.dir}/applicationContext.xml"
				 propertyFile="build.properties">
			<replacefilter
			    token="@username@"
			    value="${database.user}"/>
			<replacefilter
			    token="@password@"
			    value="${database.password}"/>
			<replacefilter
			    token="@driver@"
			    value="${database.driver}"/>
			<replacefilter
			    token="@db_url@"
			    value="${database.url.server}"/>
			<replacefilter
			    token="@db_schema@"
			    value="${database.schema.randomization}"/>
			<replacefilter
			    token="@dialect@"
			    value="${database.dialect}"/>
			<replacefilter
				token="@accessController@"
				value="${access.controller.class}"/>
		</replace>
	</target>

	<target name="build" depends="compile, configure-security, generate-randomization-properties">

		<jar destfile="${dist.dir}/randomization-client_${randomization.version}.jar"
			basedir="${build.dir}">
			<include name="ec/util/*.class"/>
			<include name="org/psygrid/randomization/model/**/*.class"/>
			<include name="org/psygrid/randomization/*.class"/>
			<exclude name="org/psygrid/randomization/*SoapBindingImpl.class"/>
			<include name="org/psygrid/randomization/client/*.class"/>
		</jar>

		<war
			destfile="${dist.dir}/randomization.war"
			webxml="${etc.dir}/web.xml">
			<lib dir="../security/dist">
				<include name="psygrid-security*.jar"/>
			</lib>
		    <lib dir="${common.dist.dir}">
				  <include name="common-client_*.jar"/>
		    </lib>
			<classes dir="${build.dir}">
				<exclude name="**/*.sql"/>
				<exclude name="**/applicationCtx.xml"/>
			</classes>
			<classes dir="${src.dir}">
				<include name="**/*.xml"/>
				<exclude name="applicationCtx.xml"/>
			</classes>
			<classes dir="${etc.dir}/wsdl">
				<include name="*.wsdl"/>
			</classes>
			<classes dir="${etc.dir}/security">
				<include name="paqc.properties"/>
				<include name="aaclient.properties"/>
			</classes>
			<webinf dir="${etc.dir}/wsdl">
				<include name="server-config.wsdd"/>
			</webinf>
			<webinf dir="${etc.dir}">
				<include name="applicationContext.xml"/>
			</webinf>
			<fileset dir="../psygrid-common/etc/tomcat">
				<include name="notfound.html" />
				<include name="error.html" />
				<include name="opencdmslogo.png" />
			</fileset>
		</war>

	</target>

	<!-- Grab the shorthash code of the current git commit or 0000000 if unable to run git -->
	<target name="git-revision">

		<!-- The git command is different on unix-like and windows OSes  -->
		<condition property="git.command" value="git.cmd" else="git">
	   		<os family="windows" />
	  	</condition>

		<exec executable="${git.command}" outputproperty="git.shorthash" errorproperty="git.error">
			<arg value="log"/>
			<arg value="--pretty=format:%h"/>
			<arg value="-n"/>
			<arg value="1"/>
	    </exec>

		<!-- If there were errors grabbing the git shorthash set git.revision it to 0000000 -->
		<condition property="git.revision" value="${git.shorthash}" else="0000000">
			<length string="${git.error}" trim="yes" length="0" when="equal"/>
		</condition>

		<echo message="Git revision = ${git.revision}"/>

	</target>

	<target name="generate-randomization-properties" depends="git-revision" >

		<property name="randomization.revision" value="${git.revision}"/>

		<copy file="${etc.dir}/templates/randomization.properties"
			  tofile="${etc.dir}/randomization.properties"
			  overwrite="true"/>
		<replace file="${etc.dir}/randomization.properties"
				 propertyFile="build.properties">
			<replacefilter
			    token="@version@"
			    value="${randomization.version}"/>
			<replacefilter
			    token="@revision@"
			    value="${randomization.revision}"/>
		</replace>

	</target>

	<target name="generate-all-xml" depends="generate-application-context-xml, generate-application-ctx-xml" />

	<target name="configure-security">
		<copy file="${etc.dir}/templates/aaclient.properties"
			  tofile="${etc.dir}/security/aaclient.properties"
			  overwrite="true"/>
		<replace file="${etc.dir}/security/aaclient.properties"
				 propertyFile="build.properties">
			<replacefilter
			    token="@trustStoreLocation@"
			    value="${org.psygrid.security.server.trustStoreLocation}"/>
			<replacefilter
			    token="@keyStoreLocation@"
			    value="${org.psygrid.security.server.keyStoreLocation}"/>
			<replacefilter
			    token="@trustStorePassword@"
			    value="${org.psygrid.security.server.trustStorePassword}"/>
			<replacefilter
			    token="@keyStorePassword@"
			    value="${org.psygrid.security.server.keyStorePassword}"/>
			<replacefilter
			    token="@serviceURL@"
			    value="${security.url}"/>
			<replacefilter
			    token="@ldapDirectoryURL@"
			    value="${security.ldap.url}"/>
		</replace>
		<copy file="${etc.dir}/templates/paqc.properties"
			  tofile="${etc.dir}/security/paqc.properties"
			  overwrite="true"/>
		<replace file="${etc.dir}/security/paqc.properties"
				 propertyFile="build.properties">
			<replacefilter
			    token="@trustStoreLocation@"
			    value="${org.psygrid.security.server.trustStoreLocation}"/>
			<replacefilter
			    token="@keyStoreLocation@"
			    value="${org.psygrid.security.server.keyStoreLocation}"/>
			<replacefilter
			    token="@trustStorePassword@"
			    value="${org.psygrid.security.server.trustStorePassword}"/>
			<replacefilter
			    token="@keyStorePassword@"
			    value="${org.psygrid.security.server.keyStorePassword}"/>
			<replacefilter
			    token="@serviceURL@"
			    value="${security.url}"/>
		</replace>
	</target>

	<target name="prepare-datasource"
		   depends="drop-schema,
					generateschema,
					generate-all-xml" />

	<target name="all"
			depends="clean, init, export-java, prepare-datasource, build" />

	<target name="part1" depends="clean, init, compile-subset"/>

	<target name="part2" depends="export-java, prepare-datasource, build" />

</project>