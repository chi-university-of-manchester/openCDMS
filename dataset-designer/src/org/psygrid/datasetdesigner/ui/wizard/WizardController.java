/*
Copyright (c) 2006-2008, The University of Manchester, UK.

This file is part of PsyGrid.

PsyGrid is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.

PsyGrid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with PsyGrid.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.psygrid.datasetdesigner.ui.wizard;

import java.awt.event.*;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.psygrid.datasetdesigner.model.DocTreeModel;
import org.psygrid.datasetdesigner.ui.wizard.descriptors.BasicPropertiesDescriptor;
import org.psygrid.datasetdesigner.ui.wizard.descriptors.MultiCentreDescriptor;

import org.psygrid.datasetdesigner.ui.wizard.panels.BasicPropsPanel;
import org.psygrid.datasetdesigner.ui.wizard.panels.MultiCentrePanel;
import org.psygrid.datasetdesigner.ui.MainFrame;
import org.psygrid.datasetdesigner.utils.DatasetUtility;
import org.psygrid.datasetdesigner.utils.PropertiesHelper;

import org.psygrid.collection.entry.persistence.PersistenceManager;


/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is pressed,
 * the controller will update the model to show a new panel and reset the state of
 * the buttons as necessary.
 */
public class WizardController implements ActionListener {
    
    private final static int RETURN_EXCEPTION = -1;
    private final static int RETURN_SUCCESS = 1;
    private final static int RETURN_FAILURE = 2;
	
	private Wizard wizard;
    
    
    /**
     * This constructor accepts a reference to the Wizard component that created it,
     * which it uses to update the button components and access the WizardModel.
     * @param w A callback to the Wizard component that created this controller.
     */    
    public WizardController(Wizard w) {
        wizard = w;
    }
    

    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Wizard class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */    
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        
        if (evt.getActionCommand().equals(Wizard.CANCEL_BUTTON_ACTION_COMMAND))
            cancelButtonPressed();
        else if (evt.getActionCommand().equals(Wizard.BACK_BUTTON_ACTION_COMMAND))
            backButtonPressed();
        else if (evt.getActionCommand().equals(Wizard.NEXT_BUTTON_ACTION_COMMAND))
            nextButtonPressed();
    }
    
    private void cancelButtonPressed() {
    	wizard.getDialog().dispose();
    }

    private void nextButtonPressed() {
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        //  Get the descriptor that the current panel identifies as the next
        //  panel, and display it.
        Object nextPanelDescriptor = null;  
        
        if (descriptor instanceof BasicPropertiesDescriptor) {
        	if (!((BasicPropsPanel)descriptor.getPanelComponent()).validatePanel(true)) {
        		nextPanelDescriptor = BasicPropertiesDescriptor.IDENTIFIER;
        	}
        } else if (descriptor instanceof MultiCentreDescriptor) {
        	if (!((MultiCentrePanel)descriptor.getPanelComponent()).validatePanel()) {
        		nextPanelDescriptor = MultiCentreDescriptor.IDENTIFIER;
        	}
        }
        
        ((WizardPanel)model.getCurrentPanelDescriptor().getPanelComponent()).next();
        
        if (nextPanelDescriptor == null) {
        	 nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        }
        
        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier) {
			DatasetUtility.closeDataset(((MainFrame)wizard.getOwner()));

        	DocTreeModel.getInstance().addDataset(model.getWizardDs());
        	((MainFrame)wizard.getOwner()).setStatusBarText(PropertiesHelper.getStringFor("org.psygrid.datasetdesigner.ui.wizard.newstudycreated") +  " " + wizard.getModel().getWizardDs().getDs().getName());
        	
        	JFrame owner = (JFrame)wizard.getOwner();
        	wizard.getDialog().dispose();
        	
        	JOptionPane.showMessageDialog(owner, 
        			PropertiesHelper.getStringFor("org.psygrid.datasetdesigner.ui.wizard.initialstudysetupcomplete"));
        } else {
            wizard.setCurrentPanel(nextPanelDescriptor);
        }
        
    }

    private void backButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
 
        //  Get the descriptor that the current panel identifies as the previous
        //  panel, and display it.
        Object backPanelDescriptor = descriptor.getBackPanelDescriptor();  
        wizard.setCurrentPanel(backPanelDescriptor);
    }

    
    void resetButtonsToPanelRules() {
    
        //  Reset the buttons to support the original panel rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the panel is finishable.
        
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        model.setCancelButtonText(Wizard.CANCEL_TEXT);
        
        //  If the panel in question has another panel behind it, enable
        //  the back button. Otherwise, disable it.
        
        model.setBackButtonText(Wizard.BACK_TEXT);
        
        if (descriptor.getBackPanelDescriptor() != null) {
                model.setBackButtonEnabled(Boolean.TRUE);
        } else { 
            model.setBackButtonEnabled(Boolean.FALSE);
        }
            
        //  If the panel in question has one or more panels in front of it,
        //  enable the next button. Otherwise, disable it.
 
        if (descriptor.getNextPanelDescriptor() != null) {
        	if (descriptor.getPanelComponent() instanceof BasicPropsPanel) {
                if (((BasicPropsPanel)descriptor.getPanelComponent()).validatePanel(false)) {
                    model.setNextFinishButtonEnabled(Boolean.TRUE);
                } else {
            		model.setNextFinishButtonEnabled(Boolean.FALSE); 
                }
        	} else {
                model.setNextFinishButtonEnabled(Boolean.TRUE);
        	}
        } else {
            model.setNextFinishButtonEnabled(Boolean.FALSE);
        }
 
        //  If the panel in question is the last panel in the series, change
        //  the Next button to Finish. Otherwise, set the text back to Next.
        if (descriptor.getNextPanelDescriptor() instanceof WizardPanelDescriptor.FinishIdentifier) {
            model.setNextFinishButtonText(Wizard.FINISH_TEXT);
        } else {
            model.setNextFinishButtonText(Wizard.NEXT_TEXT);
        }
    }
    
    
}
