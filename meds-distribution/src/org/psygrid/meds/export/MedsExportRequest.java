package org.psygrid.meds.export;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/**
 * Class to represent a request to export data from the PsyGrid
 * data repository.
 * 
 * @author Rob Harper
 * 
 * @hibernate.class table="t_meds_export_requests"
 */
public class MedsExportRequest {

	public static final String STATUS_PENDING = "Pending";
	public static final String STATUS_PROCESSING = "Processing";
	public static final String STATUS_COMPLETE = "Complete";
	public static final String STATUS_ERROR = "Error";
	public static final String STATUS_NO_DATA = "No Data";
	
	
    /**
	 * Unique identifier, generated by the Hibernate framework
	 */
	private Long id;
	
	/**
	 * Version, generated by the Hibernate framework
	 */
	private int version;
	
	/**
	 * The DN of the requestor of the export.
	 */
	private String requestor;
	
	/**
	 * The status of the request.
	 */
	private String status;
	
	/**
	 * The project code of the project to export.
	 */
	private String projectCode;
	
	/**
	 * The date/time when the export request was made.
	 */
	private Date requestDate;
	
	/**
	 * The date/time when the export request was completed.
	 */
	private Date completedDate;
	
	/**
	 * The filename of the zip file containing the exported 
	 * data.
	 */
	private String path;
	
	/**
	 * The filename of the text file containing the SHA-1 hash of the zip file.
	 */
	private String sha1Path;
	
	/**
	 * The filename of the text file containing the MD5 hash of the zip file.
	 */
	private String md5Path;
	

	/**
	 * If True then the export request is required to be processed 
	 * immediately. Otherwise it will be queued for scheduled execution.
	 */
	private boolean immediate;
	
	private boolean includeWorkflowEvents;
	
	private boolean includeViewEvents;
	
	
	/**
	 * Default no-arg constructor.
	 */
	public MedsExportRequest(){}
	
	/**
	 * Constructor that accepts the requestor and project code as
	 * arguments.
	 * 
	 * @param requestor The requestor.
	 * @param projectCode The project code.
	 */
	public MedsExportRequest(String requestor, String projectCode, boolean immediate, boolean includeViewEvents, boolean includeWorkflowEvents){
		this.requestor = requestor;
		this.projectCode = projectCode;
		this.requestDate = new Date();
		this.status = STATUS_PENDING;
		this.immediate = immediate;
		this.includeViewEvents = includeViewEvents;
		this.includeWorkflowEvents = includeWorkflowEvents;
	}
	
	/**
	 * Get the unique identifier, generated by the Hibernate framework
	 * 
	 * @return The unique identifier
	 * 
	 * @hibernate.id column = "c_id" 
	 * 			     generator-class="native"
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Set the unique identifier, generated by the Hibernate framework
	 * 
	 * @param id The unique identifier
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Get the version, generated by the Hibernate framework
	 * 
	 * @return The version
	 * 
	 * @hibernate.version column = "c_version"
	 */
	public int getVersion() {
		return version;
	}

	/**
	 * Set the version, generated by the Hibernate framework
	 * 
	 * @param version The version
	 */
	public void setVersion(int version) {
		this.version = version;
	}

	/**
	 * Get the date/time when the export request was completed.
	 * 
	 * @return The date/time completed.
	 * 
	 * @hibernate.property column="c_completed"
	 */
	public Date getCompletedDate() {
		return completedDate;
	}

	/**
	 * Set the date/time when the export request was completed.
	 * 
	 * @param completedDate The date/time completed.
	 */
	public void setCompletedDate(Date completedDate) {
		this.completedDate = completedDate;
	}

	/**
	 * Get the filename of the zip file containing the exported 
	 * data.
	 * 
	 * @return The filename.
	 * 
	 * @hibernate.property column="c_path"
	 */
	public String getPath() {
		return path;
	}

	/**
	 * Set the filename of the zip file containing the exported 
	 * data.
	 * 
	 * @param path The filename.
	 */
	public void setPath(String path) {
		this.path = path;
	}

	/**
	 * Get the filename of the text file containing the MD5 
	 * hash of the export
	 * 
	 * @return md5Path
	 * 
	 * @hibernate.property column="c_md5_path"
	 */
	public String getMd5Path() {
		return md5Path;
	}

	/**
	 * Set the filename of the text file containing the MD5 
	 * hash of the export
	 * 
	 * @param md5Path
	 */
	public void setMd5Path(String md5Path) {
		this.md5Path = md5Path;
	}

	/**
	 * Get the filename of the text file containing the SHA-1
	 * hash of the export
	 * 
	 * @return sha1Path
	 * 
	 * @hibernate.property column="c_sha1_path"
	 */
	public String getSha1Path() {
		return sha1Path;
	}

	/**
	 * Set the filename of the text file containing the SHA-1
	 * hash of the export.
	 * 
	 * @param sha1Path
	 */
	public void setSha1Path(String sha1Path) {
		this.sha1Path = sha1Path;
	}

	/**
	 * Get the project code of the project to export.
	 * 
	 * @return The project code.
	 * 
	 * @hibernate.property column="c_project_code"
	 */
	public String getProjectCode() {
		return projectCode;
	}

	/**
	 * Set the project code of the project to export.
	 * 
	 * @param projectCode The project code.
	 */
	public void setProjectCode(String projectCode) {
		this.projectCode = projectCode;
	}
	

	/**
	 * Get the date/time when the export request was made.
	 * 
	 * @return The request date.
	 * 
	 * @hibernate.property column="c_request_date"
	 */
	public Date getRequestDate() {
		return requestDate;
	}

	/**
	 * Set the date/time when the export request was made.
	 * 
	 * @param requestDate The request date.
	 */
	public void setRequestDate(Date requestDate) {
		this.requestDate = requestDate;
	}

	/**
	 * Get the DN of the requestor of the export.
	 * 
	 * @return The DN of the requestor.
	 * 
	 * @hibernate.property column="c_requestor"
	 */
	public String getRequestor() {
		return requestor;
	}

	/**
	 * Set the DN of the requestor of the export.
	 * 
	 * @param requestor The DN of the requestor.
	 */
	public void setRequestor(String requestor) {
		this.requestor = requestor;
	}

	/**
	 * Get the status of the request.
	 * 
	 * @return The status.
	 * 
	 * @hibernate.property column="c_status"
	 */
	public String getStatus() {
		return status;
	}

	/**
	 * Set the status of the request.
	 * 
	 * @param status The status.
	 */
	public void setStatus(String status) {
		this.status = status;
	}
	

	
	/**
	 * Get whether the export request is to processed immediately
	 * or not.
	 * 
	 * @return Boolean
	 * 
	 * @hibernate.property column="c_immediate"
	 */
	public boolean isImmediate() {
		return immediate;
	}

	public void setImmediate(boolean immediate) {
		this.immediate = immediate;
	}


	/**
	 * Get whether the export request should include workflow events
	 * 
	 * @return Boolean
	 * 
	 * @hibernate.property column="c_include_workflow_events"
	 */
	public boolean getIncludeWorkflowEvents() {
		return includeWorkflowEvents;
	}

	public void setIncludeWorkflowEvents(boolean includeWorkflowEvents) {
		this.includeWorkflowEvents = includeWorkflowEvents;
	}

	/**
	 * Get whether the export request should include view events
	 * 
	 * @return Boolean
	 * 
	 * @hibernate.property column="c_include_view_events"
	 */
	public boolean getIncludeViewEvents() {
		return includeViewEvents;
	}

	public void setIncludeViewEvents(boolean includeViewEvents) {
		this.includeViewEvents = includeViewEvents;
	}

	public void init(){
		this.requestDate = new Date();
		this.status = STATUS_PENDING;
	}
	

}
